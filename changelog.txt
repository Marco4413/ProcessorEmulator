
-- Version (v1.11.0-RELEASE)
-- Changes from commit @573e58e

Now Constants' Circular References Errors always know the file and pos of the error (Might slow down Compile Times)

-- Version (v1.10.2-RELEASE)
-- Changes from commit @08c72ef

Made arrays and offsets created using constants use the constant's last assigned value at the moment of their creation

-- Changes from commit @e443882

Fixed Characters and Strings accepting actual new line characters, multi-line strings is no more

-- Version (v1.10.0-RELEASE)
-- Changes from commit @43059b2

Added Standard PEMU Library

Changed the way Constants are handled by the Compiler, now they're value is the last one that was set to them
Added Constant Circular Reference Error

Added class Constant
Changed the return type of Constants.getDefaultConstants

-- Changes from commit @cb43857

Added PEMU Lib files to Open File Dialog

-- Changes from commit @bd31675

Added INCLUDE Compiler Instruction
 - Because of that, half of the Compiler's code was reworked
Changed Compiler's Error Syntax to include the file that generated the Error

-- Changes from commit @e980b99

Reworked Tokenizer and Token classes (again)
Now Compiler can tell the difference between an Horizontal and Vertical Space

-- Version (v1.9.0-RELEASE)
-- Changes from commit @b3a30f5

Added simulation performance at the bottom of the Application
Fixed closing using the Quit button not saving config
Renamed some config keys

Renamed command line argument "--memory" to "--memory-size"
Renamed command line argument "--clock" to "--clock-frequency"
Fixed command line flag "--run" closing the app even when not on the command line

Added icon to Processor Config Panel

Removed methods from class CompiledProgram: getCompileTimeNanos, getCompileTimeMicros, getCompileTimeMillis
Added method CompiledProgram#getCompileTime

Added methods to Clock class: getInterval, getDeltaTime

Renamed method Clock#getClock to getFrequency
Renamed method Clock#setClock to setFrequency
Renamed method ProcessorConfig#getClock to getClockFrequency
Renamed method ProcessorConfig#setClock to setClockFrequency
Renamed all static fields in Clock and ProcessorConfig referring to Clock Rate to include Frequency in the name instead of Clock

Now method StringUtils.format accepts an Object vararg as formats and it will use their toString method to convert them
Removed static methods from StringUtils: getEngNotationInt, getEngNotationLong
Added method StringUtils.getEngNotation

-- Changes from commit @6b3a847

Added a way of allocating an array without specifying elements' value
Now comments can be added mid-array to comment on a certain element

-- Version (v1.8.6-RELEASE)
-- Changes from commit @09fc55e

Now JA and JNBE Instructions should work as intended
Added a new line character on BRK Instruction's Debug Log
Made Application check if the current program is still valid before Compiling

-- Version (v1.8.5-RELEASE)
-- Changes from commit @4c33099

Added command line arguments: "--verify", "--skip-warning"
Added PEMULangUtil.py, a Python script which helps verifying programs from the command line
Improved layout of Registers and Flags in MemoryView

-- Version (v1.8.1-RELEASE)
-- Changes from commit @648dab6

Fixed Console's Contextual Menu not getting translated

-- Version (v1.8.0-RELEASE)
-- Changes from commit @12b1eb8

Changed a bunch of Command Line Arguments' names
Added command line argument: "--command-line"
 - Which is used to run the specified program on the command line instead of running the whole Application

Fixed some translation issues
Added button to open documentation in the About menu

Made method Application#runProcessor return a boolean that indicates if the Processor successfully started
Added methods to Application: setFlags, getCurrentProgram
Added static fields to Application: NONE, CLOSE_ON_PROCESSOR_STOP, PREVENT_VISIBILITY_CHANGE
Made method Application#close public

Reworked Console class
Moved inner classes from class Console to package pemu.app: ConsoleComponent, ConsoleContextualMenu
Added static method ConsoleContextualMenu.getInstance

Added interfaces: IClearable, IPrintable
Added class PrintablePrintStream

-- Changes from commit @75e55fd

Now MemoryView shows all registers and flags of the current Processor, before it only displayed some

Added methods to FlagHolder and RegisterHolder: getCount, toArray
Added methods to interface IProcessor: getFlags, getRegisters

-- Changes from commit @75bca10

Now if Application#dummyProcessorProducer is null then Application#processorProducer will be used instead

Made field DummyProcessor.CLOCK not static, this was done to better emulate a real Processor's implementation
Added constructor overload for DummyProcessor

Added interfaces: IDummyProcessor, IDummyMemory, IDummyFlag, IDummyRegister
 - The above mentioned interfaces should be used when implementing new Dummy variants
 - They should only be used as a method's argument type to require a Dummy variant

-- Changes from commit @2d4ee8a

Added more JavaDoc
Added method Processor.getDummyProcessor
Removed static fields from Processor
Added overload for IconUtils.importIcon

-- Version (v1.7.1-RELEASE)
-- Changes from commit @fba8880

Hotfix for Verify and Obfuscate throwing
Added interfaces: IMemoryFlag, IMemoryRegister
 - The above mentioned interfaces are now what defines an addressable Flag/Register

-- Version (v1.7.0-RELEASE)
-- Changes from commit @6c1af86

Made Application add a new line to the debug console each time an important task was completed
Now Application uses a different Processor to verify and obfuscate programs

Changed how Compiler parses comments, if this breaks programs then create an issue
Now Compiler's New Line Token will include carriage return

Added static fields to Processor: IMPLEMENTED_REGISTERS, IMPLEMENTED_FLAGS

Hopefully made Flags and Registers thread-safe
Added classes: DummyFlag, DummyMemoryFlag, DummyRegister, DummyMemoryRegister, DummyMemory, DummyProcessor
 - The above mentioned classes were introduced to make it possible to verify programs without allocating memory

Made all Clock's fields private

Renamed field ConfigEvent.CONFIG to ConfigEvent.config

Made all fields of class Instruction private
Added methods to Instruction: getKeyword, getArgumentsCount

-- Changes from commit @39588fe

Made MemoryTable clear its pointed cell with its selection, this also fixes some bugs when removing focus from it
Added method MemoryTable#clearPointedCell
Removed method with no arguments MemoryTable#setPointedCell
Moved classes from package pemu.app.memorytable to pemu.app: MemoryCellRenderer, MemoryTable

Added error message to Compiler when a label can't be declared
Removed useless constructors from classes: MemoryTable, LabelData, OffsetsData, RegisterData

Reworked classes from package pemu.arguments

-- Changes from commit @a74a4f0

Added interface IMemory
Reworked Memory class because of the added IMemory interface
Reworked Word class as a project cleanup
Made Clock class throw if the specified clock is above the max one

Added methods to ProcessorConfig: setInstructionSet, getInstructionSet
Made private ProcessorConfig's instructionSet field

Threw a dice a bunch of times to pick which classes should be final

-- Version (v1.6.0-RELEASE)
-- Changes from commit @691712d

Now Strings and Characters support Code Points

Added methods to CompiledProgram: hasCompileTime, getCompileTimeNanos, getCompileTimeMicros, getCompileTimeMillis
Added field CompiledProgram.NO_COMPILE_TIME

Improved Debug logs from Application
Added method Console.ConsoleComponent#println
Fixed some IntelliJ Idea Warnings

Added class TokenGroup, which should make Tokenizer a bit faster

-- Changes from commit @5740a3e

Now MemoryView is smarter when showing Memory Values as Characters
Added static methods to StringUtils.SpecialCharacters: isSpecialCharacter, toString

-- Version (v1.5.0-RELEASE)
-- Changes from commit @c05bdbc

Added classes: MemoryTable, MemoryCellRenderer
Added feature to see where the currently selected cell is pointing at in MemoryView

-- Changes from commit @8dc82f5

Added classes: FlagHolder, RegisterHolder
Improved how Processor class handles storing Registers and Flags

-- Changes from commit @0896610

Added class ConfigEvent
Made methods of IConfigurable accept ConfigEvent instances instead of KeyValueData
Added method ConfigManager.setDefaultOnLoadError
Removed method ConfigManager.stopEvent

-- Changes from commit @3b9868e

Made method Compiler.obfuscateProgram better obfuscate Offsets by turning them into Labels
Made more clear lots of variable names

Removed class Label
Added package compiler.labels
Added interface compiler.labels.ILabel
Added classes to package compiler.labels: BasicLabel, OffsetLabel
Generified class LabelData

Added method overload for IFlag#setValue that uses int instead of boolean

-- Version (v1.4.4-RELEASE)
-- Changes from commit @3cb3517

Fixed method Compiler.obfuscateProgram not adding labels that were declared at the end of the program
Added warning message when obfuscating a program which tells the user issues related to obfuscation
Made TranslationManager open files using UTF-8, so accented characters from localization files should work

-- Changes from commit @05a22f0

Now programs can have a dedicated starting address on the Processor

Added method IProcessor#getProgramAddress
Moved Processor's Registers and Flags at the first addresses of Memory
Renamed method CompiledProgram#getData to getProgram

-- Version (v1.4.2-RELEASE)
-- Changes from commit @9dc1196

Overhauled Program Obfuscation, now labels are also saved, so adding instructions before the program will now be possible
Improved some SyntaxError(s)

Added class OffsetsData
Made class CompiledProgram also hold data about offsets

Put Compiler Instruction's keywords into variables, modifying their name will be much easier
Now Compiler saves data about Memory Offsets in the program

Added a bunch of methods to class LabelData
Renamed some methods of class RegisterData

-- Version (v1.4.0-RELEASE)
-- Changes from commit @09e6d21

Added Instruction XMOV, which is an expanded version of the MOV instruction (see docs)
Actually implemented flag referencing from commit @c3452b0

Made Instruction#execute return void
Added InstructionError class, which can be used by Processor to throw if an Instruction threw an error
Made Instructions throw if a Flag/Register wasn't found instead of returning

Removed methods from InstructionSet: parse, parseAndExecute
Removed class InstructionSet.ExecutionData

Added method MathUtils.getBits

Added @NotNull annotation to arguments of methods in IConfigurable
Removed useless modifiers from Interfaces and added some annotations

-- Changes from commit @38d9d71

Overhauled project's layout
Made all constructors of classes LabelData and RegisterData protected

Added package pemu.config
Moved classes from package pemu.utils to pemu.config: ConfigManager, IConfigurable

Added package pemu.localization
Moved classes from package pemu.utils to pemu.localization: TranslationManager, Translation, ITranslatable

Added package pemu.tokenizer
Moved classes from package pemu.utils to pemu.tokenizer: Tokenizer, Token
Reworked Token class

Added package pemu.tokenizer.keyvalue
Moved classes from package pemu.utils to pemu.tokenizer.keyvalue: KeyValueParser, KeyValueData

-- Changes from commit @ac857ea

Changes to better organize Compiler's code
Renamed class pemu.compiler.LabelData to Label
Added class compiler.LabelData (Which holds all Labels parsed by the Compiler)
Added class compiler.RegisterData (Which holds all registers parsed by the Compiler)

-- Version (v1.3.0-RELEASE)
-- Changes from commit @8d1aa2f

Now programs can reference Registers (and Flags... Forgot to implement it) if they support it

Renamed method IProcessor#getRegistry to getRegister

Added class CompiledProgram, which is used to hold info about a program compiled with Compiler.compileFile
Moved class LabelData from class Compiler to package pemu.compiler
Made Compiler.compileFile take an IProcessor instead of an InstructionSet

Added method Application.createProcessor
Now class Application actually uses its field processorProducer

Renamed class BasicFlag to AbstractFlag
Renamed class BasicRegister to AbstractRegister
Added packages in pemu.memory: flags, registers
Interfaces moved to pemu.memory.flags package: IFlag, IRegister
Classes moved to pemu.memory.flags package: AbstractFlag, AbstractRegister

-- Changes from commit @caf66ac

Now Processor holds all its Flags and Registers inside Memory
Added methods to IProcessor: getInstructionSet, loadProgram, getReservedWords

Renamed class Registry to BasicRegister
Renamed class Flag to BasicFlag
Added interfaces: IFlag, IRegister
Added classes: MemFlag, MemRegister (which are Registers and Flags that hold their value in Memory)

-- Changes from commit @1d49def

Now Processors' must implement IProcessor
Added method Application#setProducer (It accepts a function that produces an IProcessor's instance from a ProcessorConfig)

-- Version (v1.2.1-RELEASE)
-- Changes from commit @46cc67d

Added LOOP instruction
Fixed Comments commenting the whole program (Didn't notice this since no one comments, am I right?)

-- Version (v1.2.0-RELEASE)
-- Changes from commit @2bda3e8

Made the Compiler Tokenize the specified file all at once, now new lines can be used instead of spaces
Added methods: Tokenizer#getConsumedLineCharacters and Tokenizer#getConsumedLines

-- Changes from commit @3327b46

Made offsets usable as values ([0] will point to itself, [1] will point to the next address)
Now because of the above mentioned change all label offsets must be written next to the label (like this: "label[2]", not "label [2]")

-- Changes from commit @bd4e337

Hopefully made Processor and Console.ConsoleElement classes Thread-Safe

-- Changes from commit @fdc309a

Made PEMU Constants also accept other declared constants and characters
Made #DW, #DA and Processor Instructions accept characters (see docs)
Improved Compiler's errors

-- Version (v1.1.0-RELEASE)
-- Changes from commit @9d1f452

Added Instructions: JE, JNE, JB, JNB, JBE, JNBE, JA, JNA, JAE, JNAE (see docs)

Added zoom to Console.ConsoleComponent, now consoles can be zoomed in and out (by holding CTRL and scrolling the mouse wheel)
Added button to reset Console.ConsoleComponent's zoom to Console.ConsoleContextualMenu

Added methods StringUtils.getEngNotationInt, StringUtils.getEngNotationLong
Made Processor#getInfo return Clock's interval using Engineering Notation

Added methods to Console.ConsoleComponent: #getFontSize, #setFontSize, #resetFontSize

-- Version (v1.0.7-RELEASE)
-- Changes from commit @db19c18

Added offsets to labels, see docs

Renamed field Token#REGEX to PATTERN
Added method Token#getPattern, used to get the actual regex-ready String from field Token#PATTERN

Added void constructor to Tokenizer

-- Changes from commit @a1958fc

General improvements to Compiler's code (Nothing should've changed)
Fixed method Tokenizer#getLast returning null if at 0th token

-- Version (v1.0.5-RELEASE)
-- Changes from commit @80338de

Added field Application.APP_VERSION
Added Application#processorConfig to the saved config
Added method Application#getProcessorConfig

Added methods: StringUtils.parseLong, StringUtils.compareVersions
Now App's config is reset to defaults if it was made on a different version of the app

Added method ArgumentsParser#isSpecified
Now only loading specified command line arguments

Made method KeyValueData#getOrDefault automatically convert Numbers to others
Made method KeyValueParser.parseKeyValuePairs only store numbers as either Doubles or Longs

Added method ConfigManager.stopEvent, which stops event propagation

Added static fields to ProcessorConfig which are used to get the max, min and defaults for each property
Made all primitive fields on ProcessorConfig private and added methods to set and get them

-- Changes from commit @f5eec88

Now MemoryView class saves its settings

Renamed class Config to ConfigManager and made it static
Added interface IConfigurable, implemented by classes which want to listen to Config Events

Made class KeyValueData copy the provided HashMap when created (and added copy constructor)
Fixed method KeyValueData#toString not serializing Strings properly
Made method KeyValueParser.parseKeyValuePairs also parse Floats and Booleans

-- Version (v1.0.0-RELEASE)
-- Changes from commit @49dfb33

Added class Config, which is used to manage the app's config (The config file is saved at the user's home dir as "PEMU.config")
Made Application load the current language on create
Made FileMenu's Change Language dialog save the specified language to the config file

Moved class Word from package pemu.processor to pemu.memory

Renamed and moved ParsedData class from utils.KeyValueParser to utils.KeyValueData
Added methods to KeyValueData: containsKey, toString

Added field StringUtils.SpecialCharacters.INVERSE_MAP
Added method StringUtils.SpecialCharacters.escapeAll

Added methods Translation#getLongName and Translation#getShortName

-- Changes from commit @32c4721

Added Change Language button to FileMenu

Added method TranslationManager.setCurrentTranslation that sets the current translation to the one specified
Made method TranslationManager.loadTranslation only parse the specified file

Changed how class KeyValueParser.ParsedData works

Added method Translation#getName
Added method StringUtils.getPathWExt

-- Changes from commit @d3067cf

Laid down translations support
Now all classes in the pemu.app package use TranslationManager to translate themselves

Added classes ITranslatable, Translation, TranslationManager, KeyValueParser
Moved class SpecialCharacters from package pemu.compiler to class StringUtils.SpecialCharacters
Added method StringUtils.format

Added method Application#setProcessorConfig
Removed overload for method Application.getInstance that took as its first argument a ProcessorConfig instance

-- Changes from commit @6eb49f7

Added example_obfuscated.pemu
Updated preview images
Fixed some errors in Docs

-- Changes from commit @989bbb3

Added ContextualMenu to Console.POutput and Console.Debug
Now Consoles can be saved and cleared by the user

Added class GFileDialog which is used as a Global File Dialog (can be used by all classes in the app)
Added static methods to StringUtils: getFileExtFromFilter, getFilePathWExt

Added class IconUtils
Now using method IconUtils.importIcon to load all icons
Fixed icons on the top-left corner of the main window and memory view panel looking "low res"

Added field Application.FRAME_ICON_SIZE
Renamed class Console.ConsoleElement to ConsoleComponent
Now class Console.ConsoleComponent extends JTextArea and removed its ELEMENT field

-- Version (v0.9.0-RELEASE)
-- Changes from commit @5525d57

Added Program Menu
Now Memory Size is handled as Words
Now Processor's clock is included in its info

Added methods to Application: compileProgram, verifyProgram, obfuscateProgram
Added method Compiler.obfuscateProgram
Added class TJMenuItem (Toggleable JMenuItem)

-- Changes from commit @9e5ad4e

Added Compiler Instruction: #DA

Fixed constants appending an additional 0 to the program
Now method Compiler.compileFile wants an instance of InstructionSet instead of a Processor

-- Changes from commit @bbca553

Added cell selection to MemoryView and set to multiple intervals mode
Made MemoryView clear its table's selection if it loses focus or if clicked outside of it
Made MemoryView update its table column and row count only when needed (Selection isn't cleared on each update anymore)

-- Changes from commit @8555d71

Added option to show values as characters in MemoryView
Added label to MemoryView that shows the values of all Processor's Registries (and Flags)

Renamed method MemoryView#updateTable to MemoryView#updateFrame
Added method MemoryView#addComponent
Removed method MemoryView#createConstraint

Made Quit button do the same action as closing the Application

-- Version (v0.8.2-RELEASE)
-- Changes from commit @fa97703

Processor's Clock can now be changed at runtime

-- Changes from commit @3924100

Increased precision of MemoryView's update interval
Now disposing MemoryView window

-- Version (v0.8.0-RELEASE)
-- Changes from commit @885f40f

Added Instruction: BRK
Removed DumpMemory in favour of MemoryView
Added Compiler specific exceptions: SyntaxError, ReferenceError, TypeError

Added method Tokenizer#getConsumedCharacters
Added overload for method Console.ConsoleElement#printStackTrace to ignore known exceptions

Added class to InstructionSet: ExecutionData
Now method InstructionSet#parseAndExecute returns an instance of InstructionSet.ExecutionData
Now method Processor#run handles field Processor#HISTORY as it should've been from when it was introduced

Hopefully made Memory class Thread-safe
Made class Compiler.Tokens public

-- Changes from commit @6c955a8

Added buttons to pause, resume and step Processor in Processor Menu
Added field Processor#history which holds all instructions that were executed and their memory address
Reworked method ProcessorMenu#dumpMemory

Renamed class BasicInstructions to Instructions
Renamed field Instructions#BASIC_SET to SET
Added methods to Processor: isPaused, pause, resume, step
Added overload to method Memory#toString that accepts a formatter as a Consumer

Added methods to Application: toggleProcessorExecution, stepProcessor
Added class DumpMemoryPanel

-- Changes from commit @db98271

Reorganized pemu.app package
Moved pemu.compiler.Tokens into pemu.compiler.Compiler.Tokens and made it private
Moved classes Tokenizer and Token from package pemu.compiler to pemu.utils

-- Changes from commit @f563f54

Now command line arguments can't be arbitrary numbers, they've got ranges and steps

Made field Clock#CLOCK an integer again, it doesn't need to be a double (doesn't affect Clock's precision)
Added field Clock.MIN_CLOCK

Made ArgumentsParser#getUsage display options in the same order as they're defined
Added class ArgumentOptions.RangedInt
Removed method ArgumentParser#defineDbl
Removed class ArgumentOptions.Dbl

Added RangedArgumentOption class
Added methods to ArgumentOption: toString, valueToString
Added method Word.getClosestSize
Added MathUtils class

-- Changes from commit @b434fd1

Added more special characters: \t, \b, \r, \f, \n, \0
Added Instructions: DATA, MOD, AND, OR, NOT, XOR
Added predefined constants (All VKs are now available by default)

Added method Processor#updateFlags to update flags based on the given value

-- Version (v0.7.0-RELEASE)
-- Changes from commit @7bb4dcd

Icons everywhere!
Added About menu
Added Documentation

-- Changes from commit @f0afbc4

Improved Clock precision
Added Instructions: GETI, GETK
Fixed processor not stopping properly on errors

Added class ArgumentOptions.Dbl
Added method ArgumentsParser.defineDbl

-- Changes from commit @60bd6b5

Added Dump Memory button to Processor Menu
Removed Instruction: OUTM

Added divideByWord argument to method Memory#toString

-- Version (v0.6.5-BETA)
-- Changes from commit @3c60bdf

Added command line parameter: -clock
Added measure units to Config Panel
Added Instructions: GETC, TS, TMS

Added filter for PEMU programs on Open Program's dialog
Made Open Program's dialog remember the last folder it was in
Now logging how much memory the compiled program occupies

Added clock to Processor
Added method Processor#getTimeRunning which returns how long the Processor has been running in millis or -1 if not running

-- Version (v0.6.0-BETA)
-- Changes from commit @e471fb1

Added GUI
Added command line options: -run, -program
Now program path isn't required to run the emulator
Added logo

Made OUTC clear console if NULL character is displayed
Reworked instructions: INC, DEC, ADD, SUB, MUL, DIV to hopefully work correctly
Made Processor stop itself when the Instruction Pointer is at the last address of the Memory
Fixed method InstructionSet#parseAndExecute throwing if at last memory address and the instruction has 0 arguments

Added method StringUtils.stackTraceAsString
Added ProcessorConfig class
Using Console class to log

-- Changes from commit @f78cf47

Fixed method Word#getBytes not splitting integers properly

-- Changes from commit @3726e89

Now the first CLI argument indicates the program to execute and the path to the program is relative to the working dir
Removed CLI arguments: -program

Added method Tokenizer#removeEmpties

-- Changes from commit @0359999

Made paths relative to the jar's resource location valid

-- Version (v0.5.0-DEV)
-- Changes from commit @1eab8f7

Added CLI arguments: -mem
Removed CLI arguments: -pmem, -dmem

Reworked how Compiler works (Language's syntax has changed)
Added Instructions: OUTM, INC, DEC
Removed Instructions: OUTD, OUTP, DATA

Merged fields Processor#DATA and Processor#PROGRAM into Processor#MEMORY (Program and Data memory is now shared)

Added field Instruction#ARGUMENTS
Added method Instruction#getWords
Removed field Instruction#WORDS

Added & Removed some Tokens
Renamed field Tokens#TOKENIZER_FILTER to Tokens#ALL_TOKENS
Renamed method Tokenizer#peekPrevious to Tokenizer#getLast

Added Annotations to method InstructionSet#getKeyCode
Added method InstructionSet#getInstruction

Added changelog.txt to log changes more easily
Including changelog.txt into artifact

Fixed method Memory#setValuesAt throwing if a 0-length array is passed
Fixed method Memory#getValuesAt throwing if size argument is set to 0
