
-- Version (v1.0.0-RELEASE)
-- Changes from commit @d3067cf

Laid down translations support
Now all classes in the pemu.app package use TranslationManager to translate themselves

Added classes ITranslatable, Translation, TranslationManager, KeyValueParser
Moved class SpecialCharacters from package pemu.compiler to class StringUtils.SpecialCharacters
Added method StringUtils.format

Added method Application#setProcessorConfig
Removed overload for method Application.getInstance that took as its first argument a ProcessorConfig instance

-- Changes from commit @6eb49f7

Added example_obfuscated.pemu
Updated preview images
Fixed some errors in Docs

-- Changes from commit @989bbb3

Added ContextualMenu to Console.POutput and Console.Debug
Now Consoles can be saved and cleared by the user

Added class GFileDialog which is used as a Global File Dialog (can be used by all classes in the app)
Added static methods to StringUtils: getFileExtFromFilter, getFilePathWExt

Added class IconUtils
Now using method IconUtils.importIcon to load all icons
Fixed icons on the top-left corner of the main window and memory view panel looking "low res"

Added field Application.FRAME_ICON_SIZE
Renamed class Console.ConsoleElement to ConsoleComponent
Now class Console.ConsoleComponent extends JTextArea and removed its ELEMENT field

-- Version (v0.9.0-RELEASE)
-- Changes from commit @5525d57

Added Program Menu
Now Memory Size is handled as Words
Now Processor's clock is included in its info

Added methods to Application: compileProgram, verifyProgram, obfuscateProgram
Added method Compiler.obfuscateProgram
Added class TJMenuItem (Toggleable JMenuItem)

-- Changes from commit @9e5ad4e

Added Compiler Instruction: #DA

Fixed constants appending an additional 0 to the program
Now method Compiler.compileFile wants an instance of InstructionSet instead of a Processor

-- Changes from commit @bbca553

Added cell selection to MemoryView and set to multiple intervals mode
Made MemoryView clear its table's selection if it loses focus or if clicked outside of it
Made MemoryView update its table column and row count only when needed (Selection isn't cleared on each update anymore)

-- Changes from commit @8555d71

Added option to show values as characters in MemoryView
Added label to MemoryView that shows the values of all Processor's Registries (and Flags)

Renamed method MemoryView#updateTable to MemoryView#updateFrame
Added method MemoryView#addComponent
Removed method MemoryView#createConstraint

Made Quit button do the same action as closing the Application

-- Version (v0.8.2-RELEASE)
-- Changes from commit @fa97703

Processor's Clock can now be changed at runtime

-- Changes from commit @3924100

Increased precision of MemoryView's update interval
Now disposing MemoryView window

-- Version (v0.8.0-RELEASE)
-- Changes from commit @885f40f

Added Instruction: BRK
Removed DumpMemory in favour of MemoryView
Added Compiler specific exceptions: SyntaxError, ReferenceError, TypeError

Added method Tokenizer#getConsumedCharacters
Added overload for method Console.ConsoleElement#printStackTrace to ignore known exceptions

Added class to InstructionSet: ExecutionData
Now method InstructionSet#parseAndExecute returns an instance of InstructionSet.ExecutionData
Now method Processor#run handles field Processor#HISTORY as it should've been from when it was introduced

Hopefully made Memory class Thread-safe
Made class Compiler.Tokens public

-- Changes from commit @6c955a8

Added buttons to pause, resume and step Processor in Processor Menu
Added field Processor#history which holds all instructions that were executed and their memory address
Reworked method ProcessorMenu#dumpMemory

Renamed class BasicInstructions to Instructions
Renamed field Instructions#BASIC_SET to SET
Added methods to Processor: isPaused, pause, resume, step
Added overload to method Memory#toString that accepts a formatter as a Consumer

Added methods to Application: toggleProcessorExecution, stepProcessor
Added class DumpMemoryPanel

-- Changes from commit @db98271

Reorganized pemu.app package
Moved pemu.compiler.Tokens into pemu.compiler.Compiler.Tokens and made it private
Moved classes Tokenizer and Token from package pemu.compiler to pemu.utils

-- Changes from commit @f563f54

Now command line arguments can't be arbitrary numbers, they've got ranges and steps

Made field Clock#CLOCK an integer again, it doesn't need to be a double (doesn't affect Clock's precision)
Added field Clock.MIN_CLOCK

Made ArgumentsParser#getUsage display options in the same order as they're defined
Added class ArgumentOptions.RangedInt
Removed method ArgumentParser#defineDbl
Removed class ArgumentOptions.Dbl

Added RangedArgumentOption class
Added methods to ArgumentOption: toString, valueToString
Added method Word.getClosestSize
Added MathUtils class

-- Changes from commit @b434fd1

Added more special characters: \t, \b, \r, \f, \n, \0
Added Instructions: DATA, MOD, AND, OR, NOT, XOR
Added predefined constants (All VKs are now available by default)

Added method Processor#updateFlags to update flags based on the given value

-- Version (v0.7.0-RELEASE)
-- Changes from commit @7bb4dcd

Icons everywhere!
Added About menu
Added Documentation

-- Changes from commit @f0afbc4

Improved Clock precision
Added Instructions: GETI, GETK
Fixed processor not stopping properly on errors

Added class ArgumentOptions.Dbl
Added method ArgumentsParser.defineDbl

-- Changes from commit @60bd6b5

Added Dump Memory button to Processor Menu
Removed Instruction: OUTM

Added divideByWord argument to method Memory#toString

-- Version (v0.6.5-BETA)
-- Changes from commit @3c60bdf

Added command line parameter: -clock
Added measure units to Config Panel
Added Instructions: GETC, TS, TMS

Added filter for PEMU programs on Open Program's dialog
Made Open Program's dialog remember the last folder it was in
Now logging how much memory the compiled program occupies

Added clock to Processor
Added method Processor#getTimeRunning which returns how long the Processor has been running in millis or -1 if not running

-- Version (v0.6.0-BETA)
-- Changes from commit @e471fb1

Added GUI
Added command line options: -run, -program
Now program path isn't required to run the emulator
Added logo

Made OUTC clear console if NULL character is displayed
Reworked instructions: INC, DEC, ADD, SUB, MUL, DIV to hopefully work correctly
Made Processor stop itself when the Instruction Pointer is at the last address of the Memory
Fixed method InstructionSet#parseAndExecute throwing if at last memory address and the instruction has 0 arguments

Added method StringUtils.stackTraceAsString
Added ProcessorConfig class
Using Console class to log

-- Changes from commit @f78cf47

Fixed method Word#getBytes not splitting integers properly

-- Changes from commit @3726e89

Now the first CLI argument indicates the program to execute and the path to the program is relative to the working dir
Removed CLI arguments: -program

Added method Tokenizer#removeEmpties

-- Changes from commit @0359999

Made paths relative to the jar's resource location valid

-- Version (v0.5.0-DEV)
-- Changes from commit @1eab8f7

Added CLI arguments: -mem
Removed CLI arguments: -pmem, -dmem

Reworked how Compiler works (Language's syntax has changed)
Added Instructions: OUTM, INC, DEC
Removed Instructions: OUTD, OUTP, DATA

Merged fields Processor#DATA and Processor#PROGRAM into Processor#MEMORY (Program and Data memory is now shared)

Added field Instruction#ARGUMENTS
Added method Instruction#getWords
Removed field Instruction#WORDS

Added & Removed some Tokens
Renamed field Tokens#TOKENIZER_FILTER to Tokens#ALL_TOKENS
Renamed method Tokenizer#peekPrevious to Tokenizer#getLast

Added Annotations to method InstructionSet#getKeyCode
Added method InstructionSet#getInstruction

Added changelog.txt to log changes more easily
Including changelog.txt into artifact

Fixed method Memory#setValuesAt throwing if a 0-length array is passed
Fixed method Memory#getValuesAt throwing if size argument is set to 0
